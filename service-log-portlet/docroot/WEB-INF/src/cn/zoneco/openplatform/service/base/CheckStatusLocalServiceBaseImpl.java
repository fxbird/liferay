/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cn.zoneco.openplatform.service.base;

import cn.zoneco.openplatform.model.CheckStatus;
import cn.zoneco.openplatform.service.CheckStatusLocalService;
import cn.zoneco.openplatform.service.persistence.AttachmentInfoPersistence;
import cn.zoneco.openplatform.service.persistence.CallLogPersistence;
import cn.zoneco.openplatform.service.persistence.CheckStatusPersistence;
import cn.zoneco.openplatform.service.persistence.ServiceInfoPersistence;
import cn.zoneco.openplatform.service.persistence.ZEntityFinder;
import cn.zoneco.openplatform.service.persistence.ZEntityPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the check status local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link cn.zoneco.openplatform.service.impl.CheckStatusLocalServiceImpl}.
 * </p>
 *
 * @author fxbird
 * @see cn.zoneco.openplatform.service.impl.CheckStatusLocalServiceImpl
 * @see cn.zoneco.openplatform.service.CheckStatusLocalServiceUtil
 * @generated
 */
public abstract class CheckStatusLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements CheckStatusLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link cn.zoneco.openplatform.service.CheckStatusLocalServiceUtil} to access the check status local service.
	 */

	/**
	 * Adds the check status to the database. Also notifies the appropriate model listeners.
	 *
	 * @param checkStatus the check status
	 * @return the check status that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CheckStatus addCheckStatus(CheckStatus checkStatus)
		throws SystemException {
		checkStatus.setNew(true);

		return checkStatusPersistence.update(checkStatus);
	}

	/**
	 * Creates a new check status with the primary key. Does not add the check status to the database.
	 *
	 * @param statusId the primary key for the new check status
	 * @return the new check status
	 */
	@Override
	public CheckStatus createCheckStatus(long statusId) {
		return checkStatusPersistence.create(statusId);
	}

	/**
	 * Deletes the check status with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param statusId the primary key of the check status
	 * @return the check status that was removed
	 * @throws PortalException if a check status with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CheckStatus deleteCheckStatus(long statusId)
		throws PortalException, SystemException {
		return checkStatusPersistence.remove(statusId);
	}

	/**
	 * Deletes the check status from the database. Also notifies the appropriate model listeners.
	 *
	 * @param checkStatus the check status
	 * @return the check status that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CheckStatus deleteCheckStatus(CheckStatus checkStatus)
		throws SystemException {
		return checkStatusPersistence.remove(checkStatus);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(CheckStatus.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return checkStatusPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link cn.zoneco.openplatform.model.impl.CheckStatusModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return checkStatusPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link cn.zoneco.openplatform.model.impl.CheckStatusModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return checkStatusPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return checkStatusPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return checkStatusPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public CheckStatus fetchCheckStatus(long statusId)
		throws SystemException {
		return checkStatusPersistence.fetchByPrimaryKey(statusId);
	}

	/**
	 * Returns the check status with the primary key.
	 *
	 * @param statusId the primary key of the check status
	 * @return the check status
	 * @throws PortalException if a check status with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public CheckStatus getCheckStatus(long statusId)
		throws PortalException, SystemException {
		return checkStatusPersistence.findByPrimaryKey(statusId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return checkStatusPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the check statuses.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link cn.zoneco.openplatform.model.impl.CheckStatusModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of check statuses
	 * @param end the upper bound of the range of check statuses (not inclusive)
	 * @return the range of check statuses
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<CheckStatus> getCheckStatuses(int start, int end)
		throws SystemException {
		return checkStatusPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of check statuses.
	 *
	 * @return the number of check statuses
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getCheckStatusesCount() throws SystemException {
		return checkStatusPersistence.countAll();
	}

	/**
	 * Updates the check status in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param checkStatus the check status
	 * @return the check status that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CheckStatus updateCheckStatus(CheckStatus checkStatus)
		throws SystemException {
		return checkStatusPersistence.update(checkStatus);
	}

	/**
	 * Returns the attachment info local service.
	 *
	 * @return the attachment info local service
	 */
	public cn.zoneco.openplatform.service.AttachmentInfoLocalService getAttachmentInfoLocalService() {
		return attachmentInfoLocalService;
	}

	/**
	 * Sets the attachment info local service.
	 *
	 * @param attachmentInfoLocalService the attachment info local service
	 */
	public void setAttachmentInfoLocalService(
		cn.zoneco.openplatform.service.AttachmentInfoLocalService attachmentInfoLocalService) {
		this.attachmentInfoLocalService = attachmentInfoLocalService;
	}

	/**
	 * Returns the attachment info persistence.
	 *
	 * @return the attachment info persistence
	 */
	public AttachmentInfoPersistence getAttachmentInfoPersistence() {
		return attachmentInfoPersistence;
	}

	/**
	 * Sets the attachment info persistence.
	 *
	 * @param attachmentInfoPersistence the attachment info persistence
	 */
	public void setAttachmentInfoPersistence(
		AttachmentInfoPersistence attachmentInfoPersistence) {
		this.attachmentInfoPersistence = attachmentInfoPersistence;
	}

	/**
	 * Returns the call log local service.
	 *
	 * @return the call log local service
	 */
	public cn.zoneco.openplatform.service.CallLogLocalService getCallLogLocalService() {
		return callLogLocalService;
	}

	/**
	 * Sets the call log local service.
	 *
	 * @param callLogLocalService the call log local service
	 */
	public void setCallLogLocalService(
		cn.zoneco.openplatform.service.CallLogLocalService callLogLocalService) {
		this.callLogLocalService = callLogLocalService;
	}

	/**
	 * Returns the call log persistence.
	 *
	 * @return the call log persistence
	 */
	public CallLogPersistence getCallLogPersistence() {
		return callLogPersistence;
	}

	/**
	 * Sets the call log persistence.
	 *
	 * @param callLogPersistence the call log persistence
	 */
	public void setCallLogPersistence(CallLogPersistence callLogPersistence) {
		this.callLogPersistence = callLogPersistence;
	}

	/**
	 * Returns the check status local service.
	 *
	 * @return the check status local service
	 */
	public cn.zoneco.openplatform.service.CheckStatusLocalService getCheckStatusLocalService() {
		return checkStatusLocalService;
	}

	/**
	 * Sets the check status local service.
	 *
	 * @param checkStatusLocalService the check status local service
	 */
	public void setCheckStatusLocalService(
		cn.zoneco.openplatform.service.CheckStatusLocalService checkStatusLocalService) {
		this.checkStatusLocalService = checkStatusLocalService;
	}

	/**
	 * Returns the check status persistence.
	 *
	 * @return the check status persistence
	 */
	public CheckStatusPersistence getCheckStatusPersistence() {
		return checkStatusPersistence;
	}

	/**
	 * Sets the check status persistence.
	 *
	 * @param checkStatusPersistence the check status persistence
	 */
	public void setCheckStatusPersistence(
		CheckStatusPersistence checkStatusPersistence) {
		this.checkStatusPersistence = checkStatusPersistence;
	}

	/**
	 * Returns the service info local service.
	 *
	 * @return the service info local service
	 */
	public cn.zoneco.openplatform.service.ServiceInfoLocalService getServiceInfoLocalService() {
		return serviceInfoLocalService;
	}

	/**
	 * Sets the service info local service.
	 *
	 * @param serviceInfoLocalService the service info local service
	 */
	public void setServiceInfoLocalService(
		cn.zoneco.openplatform.service.ServiceInfoLocalService serviceInfoLocalService) {
		this.serviceInfoLocalService = serviceInfoLocalService;
	}

	/**
	 * Returns the service info persistence.
	 *
	 * @return the service info persistence
	 */
	public ServiceInfoPersistence getServiceInfoPersistence() {
		return serviceInfoPersistence;
	}

	/**
	 * Sets the service info persistence.
	 *
	 * @param serviceInfoPersistence the service info persistence
	 */
	public void setServiceInfoPersistence(
		ServiceInfoPersistence serviceInfoPersistence) {
		this.serviceInfoPersistence = serviceInfoPersistence;
	}

	/**
	 * Returns the z entity local service.
	 *
	 * @return the z entity local service
	 */
	public cn.zoneco.openplatform.service.ZEntityLocalService getZEntityLocalService() {
		return zEntityLocalService;
	}

	/**
	 * Sets the z entity local service.
	 *
	 * @param zEntityLocalService the z entity local service
	 */
	public void setZEntityLocalService(
		cn.zoneco.openplatform.service.ZEntityLocalService zEntityLocalService) {
		this.zEntityLocalService = zEntityLocalService;
	}

	/**
	 * Returns the z entity persistence.
	 *
	 * @return the z entity persistence
	 */
	public ZEntityPersistence getZEntityPersistence() {
		return zEntityPersistence;
	}

	/**
	 * Sets the z entity persistence.
	 *
	 * @param zEntityPersistence the z entity persistence
	 */
	public void setZEntityPersistence(ZEntityPersistence zEntityPersistence) {
		this.zEntityPersistence = zEntityPersistence;
	}

	/**
	 * Returns the z entity finder.
	 *
	 * @return the z entity finder
	 */
	public ZEntityFinder getZEntityFinder() {
		return zEntityFinder;
	}

	/**
	 * Sets the z entity finder.
	 *
	 * @param zEntityFinder the z entity finder
	 */
	public void setZEntityFinder(ZEntityFinder zEntityFinder) {
		this.zEntityFinder = zEntityFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("cn.zoneco.openplatform.model.CheckStatus",
			checkStatusLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"cn.zoneco.openplatform.model.CheckStatus");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return CheckStatus.class;
	}

	protected String getModelClassName() {
		return CheckStatus.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = checkStatusPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = cn.zoneco.openplatform.service.AttachmentInfoLocalService.class)
	protected cn.zoneco.openplatform.service.AttachmentInfoLocalService attachmentInfoLocalService;
	@BeanReference(type = AttachmentInfoPersistence.class)
	protected AttachmentInfoPersistence attachmentInfoPersistence;
	@BeanReference(type = cn.zoneco.openplatform.service.CallLogLocalService.class)
	protected cn.zoneco.openplatform.service.CallLogLocalService callLogLocalService;
	@BeanReference(type = CallLogPersistence.class)
	protected CallLogPersistence callLogPersistence;
	@BeanReference(type = cn.zoneco.openplatform.service.CheckStatusLocalService.class)
	protected cn.zoneco.openplatform.service.CheckStatusLocalService checkStatusLocalService;
	@BeanReference(type = CheckStatusPersistence.class)
	protected CheckStatusPersistence checkStatusPersistence;
	@BeanReference(type = cn.zoneco.openplatform.service.ServiceInfoLocalService.class)
	protected cn.zoneco.openplatform.service.ServiceInfoLocalService serviceInfoLocalService;
	@BeanReference(type = ServiceInfoPersistence.class)
	protected ServiceInfoPersistence serviceInfoPersistence;
	@BeanReference(type = cn.zoneco.openplatform.service.ZEntityLocalService.class)
	protected cn.zoneco.openplatform.service.ZEntityLocalService zEntityLocalService;
	@BeanReference(type = ZEntityPersistence.class)
	protected ZEntityPersistence zEntityPersistence;
	@BeanReference(type = ZEntityFinder.class)
	protected ZEntityFinder zEntityFinder;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private CheckStatusLocalServiceClpInvoker _clpInvoker = new CheckStatusLocalServiceClpInvoker();
}